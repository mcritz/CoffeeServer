# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
# Start database: docker-compose up db
# Run migrations: docker-compose run migrate
#       Stop all: docker-compose down (add -v to wipe db)
#
version: '3.7'

volumes:
  db_data:
  # note that youâ€™ll need to use `docker volume create caddy_data` before running `docker compose up`
  caddy_data:
    external: true
  caddy_config:

x-shared_environment: &shared_environment
  LOG_LEVEL: ${LOG_LEVEL:-debug}
  DATABASE_HOST: db
  DATABASE_NAME: ${DATABASE_NAME}
  DATABASE_USERNAME: ${DATABASE_USERNAME}
  DATABASE_SECRET: ${DATABASE_SECRET}
  JWT_SIGNING_SECRET: ${JWT_SIGNING_SECRET}
  SERVER_ADMIN_PASSWORD: ${SERVER_ADMIN_PASSWORD}
  SERVER_ADMIN_EMAIL: ${SERVER_ADMIN_EMAIL}
services:
  caddy:
    image: caddy:2.6
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - $PWD/Caddyfile:/etc/caddy/Caddyfile
      - $PWD/site:/srv
      - caddy_data:/data
      - caddy_config:/config
  app:
    image: coffee-server:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
    ports:
      - '8080:8080'
    restart: unless-stopped
    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
  migrate:
    image: coffee-server:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
    command: ["migrate", "--yes"]
    deploy:
      replicas: 0
    restart: unless-stopped
  revert:
    image: coffee-server:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
    command: ["migrate", "--revert", "--yes"]
    deploy:
      replicas: 0
    restart: unless-stopped
  db:
    image: postgres:14-alpine
    volumes:
      - db_data:/var/lib/postgresql/data/pgdata
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      <<: *shared_environment
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_SECRET}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - '5432:5432'
